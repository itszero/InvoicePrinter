#!/usr/bin/ruby
# InvoicePrinter::U420
# Ruby interface to Invoice Printer (Epson U420)
#
# = Credits
# 
# The API interface idea comes from clkao's Business-TW-Invoice-U420[http://search.cpan.org/dist/Business-TW-Invoice-U420/] perl module.
#
# Author:: Chien-An "Zero" Cho (itsZero)
# Email:: itszero at gmail dot com
# Copyright:: Copyright (c) 2009 Chien-An "Zero" Cho
# License:: MIT License
# 
#
# = License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
require 'iconv'

# InvoicePrinter acts as a namespace of the InvoicePrinter gem.
# To use this gem, instantiate any class under this namespace.
module InvoicePrinter
  
  # This class provides the interface to communicate with Epson U420-series
  # invoice printer. The output is defaulted to STDOUT, which is your display.
  # To actually print out the content, please use SerialPort[http://github.com/toholio/ruby-serialport] gem to
  # get an IO object of the Serial Port, then assigned it to the output parameter when initiailizing this class.
  # 
  # = Example
  #
  #   require 'rubygems'
  #   require 'invoice_printer'
  #   require 'serialport'
  #   
  #   serial_out = SerialPort.new("/dev/tty.usbserial",
  #     :baud_rate => 9600,
  #     :databits => 8,
  #     :parity => SerialPort::NONE,
  #     :stopbits => 1
  #   )
  #   
  #   prt = InvoicePrinter::U420.new(
  #     :header => "Hello, World",
  #     :lines_total => 35,
  #     :lines_available => 18,
  #     :lines_stamp => 5,
  #     :output => serial_out
  #   )
  #
  #   prt.println "Hello, World"
  #   prt.feed 2
  #   prt.println "Yeah"
  #   prt.cut # This is actually cut the paper.
  class U420
    # Current output stream, which receives the command generated by this library.
	  attr_accessor :output
	  # Options which controls the behavior of this library.
	  # Although we're using option[:output] to give output stream when initializing,
	  # please notice that changing options[:output] by accessor is not working.
	  # To do so, use output accessor instead.
	  attr_accessor :options

  	DEFAULT_OPTIONS = 
  	{
	  	:header => "",
  		:lines_total => 35,
	  	:lines_available => 18,
		  :lines_stamp => 5,
  		:output => STDOUT,
      :encoding => "big5//ignore"
	  }

  	ESC = 0x1b.chr

    # Initialize a new instance of U420 printer API interface.
    # The options contains some parameters you can use to customize the behavior of the printer.
    # The default value should be very useful if you're going to print invoices in Taiwan.
    # 
    # Supported options:
    #
    #   * header - A string contains the header of each invoice, can contains multiple line. (Default: "")
    #   * lines_total - How many lines a page of invoice should contains. (Default: 35)
    #   * lines_available - How many lines should a page of invoice can print on. (Default: 18)
    #   * lines_stamp - The height of the stamp (before the header) of the invoice. (Default: 5)
    #   * output - An IO object which will receive the command of the printer. (Default: STDOUT)
    #   * encoding - The encoding of non-ascii characters the printer supported. (Default: Big5)
    #   * dont_init_printer - Don't send [ESC]@ to printer before the data. (Default: false)
	  def initialize(options)
		  @options = DEFAULT_OPTIONS.merge(options)
  		@output = @options[:output]
	  	@lines_used = 0

		  self.init_printer unless options[:dont_init_printer]
  	end

    # Output the [ESC]@ to the printer, initialize the printer.
	  def init_printer
		  @output.write("#{ESC}@")
  	end

    # Skip some lines, default is 1.
	  def feed(lines = 1)
		  @lines_used += lines
  		@output.write("#{ESC}d#{lines.chr}")
	  end

    # Use this command to utilize the stamping mechanism on the printer.
  	def stamp
	  	@output.write("#{ESC}o")
  	end

    # Roll the entire page out and do the cut, it then stamp on the next page, too.
	  def cut
		  return unless @lines_used > 0

  		feed(@options[:lines_total] - @lines_used + 1)
	  	stamp
		  print(0x0c.chr)
  		@lines_used = 0 
	  end

    # Print out string on the printer, the non-ascii code is automatically converted using Iconv.
  	def print(str)
	  	@output.write(Iconv.iconv(@options[:encoding], "utf-8//ignore", str))
  	end

    # Print out string and feed to next line.
    # We also do the paging logic here.
	  def println(str)
		  unless @lines_used > 0
			  feed(@options[:lines_stamp])
  			println(@options[:header])
	  	end

      str.split("\n").each do |line|
    		print("#{line}\n")

  	  	@lines_used += 1
  		  cut if (@lines_used == @options[:lines_available] + @options[:lines_stamp])		
		  end
  	end
end
